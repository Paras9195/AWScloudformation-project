Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24
#================================Customize it=================================== 

    
  AMIIDLinux:
    Description: AMI ID For launch Amazon Linux2 Instance
    Type: String
    Default: ami-02b49a24cfb95941c
    
 
    
  linuxaccesskey:
    Description: linux server ppk access key
    Type: String
    Default: linux-keypair-2024
#======================================================================================================= 
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8081'
          ToPort: '8081'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

#=========================Create Amazon Linux2 Apache Server==============================================  
  ApacheServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMIIDLinux
      InstanceType: t2.micro
      KeyName: !Ref linuxaccesskey
      SecurityGroupIds:
        - !Ref NoIngressSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install httpd -y
          sudo systemctl start httpd
          sudo systemctl enable httpd
          sudo wget https://www.free-css.com/assets/files/free-css-templates/download/page296/oxer.zip
          sudo unzip oxer.zip
          sudo cp -rvf oxer-html/* /var/www/html/
      SubnetId: !Ref PublicSubnet2
      Tags:
        -
          Key: Name
          Value: ApacheWebServer
#=========================Create Docker (nginx and httpd) Server============================== 
  DockerServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMIIDLinux
      InstanceType: t2.micro
      KeyName: !Ref linuxaccesskey
      SecurityGroupIds:
        - !Ref NoIngressSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          sudo yum update -y
          sudo yum install docker -y
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo mkdir /web
          sudo chmod 777 /web
          sudo wget https://www.free-css.com/assets/files/free-css-templates/download/page291/edu-meeting.zip
          sudo unzip edu-meeting.zip
          sudo cp -rvf /templatemo_569_edu_meeting/* /web/          
          sudo docker run -dt --name=cont1 -t -p 8080:80 -v /web/:/usr/share/nginx/html/ --privileged=true nginx
          sudo mkdir /web1
          sudo chmod 777 /web1
          sudo wget https://www.free-css.com/assets/files/free-css-templates/download/page291/carserv.zip
          sudo unzip carserv.zip
          sudo cp -rvf /car-repair-html-template/* /web1/ 
          sudo docker run -dt --name=cont2 -t -p 8081:80 -v /web1/:/usr/local/apache2/htdocs/ --privileged=true httpd
          
      SubnetId: !Ref PublicSubnet2
      Tags:
        -
          Key: Name
          Value: DockerServer

#===============================================================================================
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
    
  DockerServer:
    Description: Docker server info
    Value: !GetAtt DockerServer.PublicIp
    
  ApacheServer:
    Description: Apache Server Public IP
    Value: !GetAtt ApacheServer.PublicIp

